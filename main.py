import os
import re
import time
import sqlite3
import asyncio
from contextlib import closing

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

# ================== .env ==================
# .env–¥–∞:
# BOT_TOKEN=xxxxxxxxx:yyyyyyyy
# ADMIN_PHONE=+99890xxxxxxx
# (–∏—Ö—Ç–∏—ë—Ä–∏–π) ADMIN_CHAT_ID=123456789  —ë–∫–∏ –∫–∞–Ω–∞–ª ID: -100xxxx
load_dotenv()
BOT_TOKEN     = os.getenv("BOT_TOKEN")
ADMIN_PHONE   = os.getenv("ADMIN_PHONE", "+998901234567")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –∏—Ö—Ç–∏—ë—Ä–∏–π

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN —Ç–æ–ø–∏–ª–º–∞–¥–∏ (.env –Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–Ω–≥).")

# ================== SQLite ==================
DB_PATH = "orders.db"

def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn, conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS orders(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_user_id INTEGER,
            full_name TEXT,
            username TEXT,
            phone TEXT,
            route TEXT,
            people INTEGER,
            cargo TEXT,
            note TEXT,
            created_at INTEGER
        );
        """)
init_db()

# ================== Bot / Dispatcher ==================
bot = Bot(BOT_TOKEN)
dp  = Dispatcher(storage=MemoryStorage())

# ================== States ==================
class OrderForm(StatesGroup):
    phone      = State()
    route_from = State()
    route_to   = State()
    choice     = State()   # –æ–¥–∞–º —Å–æ–Ω–∏ —ë–∫–∏ "—Ñ–∞“õ–∞—Ç —é–∫"
    note       = State()   # —Ñ–∞“õ–∞—Ç –æ–¥–∞–º —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω–¥–∞

# ================== Keyboards ==================
BACK = "üîô –û—Ä“õ–∞–≥–∞"

def kb_request_phone():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏ —É–ª–∞—à–∏—à", request_contact=True)],
                  [KeyboardButton(text=BACK)]],
        resize_keyboard=True
    )

# –®–∞“≥–∞—Ä–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ ‚Äî –∏—Å—Ç–∞–≥–∞–Ω–∏–Ω–≥–∏–∑—á–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–Ω–≥/–∫—û–ø–∞–π—Ç–∏—Ä–∏–Ω–≥
CITIES = [
    "–¢–æ—à–∫–µ–Ω—Ç", "“ö—û“õ–æ–Ω", "–ù–∞–º–∞–Ω–≥–∞–Ω", "–ê–Ω–¥–∏–∂–æ–Ω", "–§–∞—Ä“ì–æ–Ω–∞",
    "–°–∞–º–∞—Ä“õ–∞–Ω–¥", "–ë—É—Ö–æ—Ä–æ", "–ù–∞–≤–æ–∏–π", "“ö–∞—Ä—à–∏", "–¢–µ—Ä–º–∏–∑",
    "–ù—É–∫—É—Å", "–•–∏–≤–∞"
]

def kb_cities():
    rows, row = [], []
    for i, name in enumerate(CITIES, start=1):
        row.append(KeyboardButton(text=name))
        if i % 3 == 0:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([KeyboardButton(text=BACK)])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def kb_choice():
    rows = [
        [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
        [KeyboardButton(text="4"), KeyboardButton(text="5+")],
        [KeyboardButton(text="üì¶ –§–∞“õ–∞—Ç —é–∫")],
        [KeyboardButton(text=BACK)]
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def kb_back_only():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=BACK)]], resize_keyboard=True)

# ================== Validators / helpers ==================
PHONE_RE = re.compile(r"^\+?\d{7,15}$")

def normalize_phone(s: str) -> str:
    s = (s or "").strip().replace(" ", "")
    if s.startswith("00"):
        s = "+" + s[2:]
    if s.startswith("998") and len(s) == 12:
        s = "+" + s
    if not s.startswith("+") and s.isdigit():
        s = "+" + s
    return s

def is_valid_phone(s: str) -> bool:
    return bool(PHONE_RE.match(s or ""))

def looks_like_cargo_only(text: str) -> bool:
    t = (text or "").lower()
    return ("—é–∫" in t) or ("yuk" in t) or (t == "üì¶ —Ñ–∞“õ–∞—Ç —é–∫".lower())

def people_to_int(s: str):
    allowed = {"1", "2", "3", "4", "5+"}
    if s not in allowed:
        return None
    return 5 if s.endswith("+") else int(s)

def trim_note(s: str) -> str | None:
    if s is None:
        return None
    s = s.strip()
    if not s:
        return None
    if len(s) > 350:
        return None
    return s

async def save_order_safe(m: Message, phone: str, route: str, people: int, cargo: str, note: str):
    try:
        with closing(sqlite3.connect(DB_PATH)) as conn, conn:
            conn.execute(
                "INSERT INTO orders (tg_user_id, full_name, username, phone, route, people, cargo, note, created_at) "
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                (m.from_user.id, m.from_user.full_name, m.from_user.username,
                 phone, route, people, cargo, note, int(time.time()))
            )
    except Exception as e:
        print("[DB] Save failed:", e)

async def notify_operator_safe(m: Message, phone: str, route: str, people: int, cargo: str, note: str):
    if not ADMIN_CHAT_ID:
        return
    try:
        txt = (
            "üÜï *–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞*\n"
            f"üë§ {m.from_user.full_name} @{m.from_user.username or '-'} (ID: {m.from_user.id})\n"
            f"üìû {phone}\n"
            f"üöñ {route}\n"
            f"üë• –û–¥–∞–º: {people if people>0 else '-'}\n"
            f"üì¶ –Æ–∫: {cargo}\n"
            f"üìù {note}"
        )
        await bot.send_message(int(ADMIN_CHAT_ID), txt, parse_mode="Markdown")
    except Exception as e:
        print("[ADMIN] Notify failed:", e)

async def finalize(m: Message, state: FSMContext, phone: str, route: str, people: int, cargo: str, note: str):
    await save_order_safe(m, phone, route, people, cargo, note)
    await notify_operator_safe(m, phone, route, people, cargo, note)
    confirm = (
        "‚úÖ –ë—É—é—Ä—Ç–º–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üöñ –ô—û–Ω–∞–ª–∏—à: {route}\n"
        f"üë• –û–¥–∞–º: {people if people>0 else '-'}\n"
        f"üì¶ –Æ–∫: {cargo}\n"
        f"üìù –ò–∑–æ“≥: {note}\n\n"
        f"üßë‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏: {ADMIN_PHONE}\n"
        "–Ø–Ω–≥–∏ –±—É—é—Ä—Ç–º–∞ —É—á—É–Ω /start –Ω–∏ –±–æ—Å–∏–Ω–≥."
    )
    await m.answer(confirm, reply_markup=ReplyKeyboardRemove())
    await state.clear()

# ================== Commands ==================
@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º üôå\n"
        "üöñ *DAVON EXPRESS TAXI* —Ö–∏–∑–º–∞—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!\n\n"
        "–ë—É—é—Ä—Ç–º–∞ –±–µ—Ä–∏—à —É—á—É–Ω –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.",
        reply_markup=kb_request_phone(),
        parse_mode="Markdown"
    )
    await state.set_state(OrderForm.phone)

@dp.message(Command("cancel"))
async def cmd_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏. –ë–æ—à–∏–¥–∞–Ω /start –Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=ReplyKeyboardRemove())

# ================== 1) –¢–µ–ª–µ—Ñ–æ–Ω ==================
@dp.message(OrderForm.phone, F.contact)
async def phone_from_contact(m: Message, state: FSMContext):
    ph = normalize_phone(m.contact.phone_number)
    if not is_valid_phone(ph):
        await m.answer("‚ùóÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–¥–∞–Ω –∫–µ–ª–≥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ—Ç—û“ì—Ä–∏. “ö–∞–π—Ç–∞ —É–ª–∞—à–∏–Ω–≥ —ë–∫–∏ “õ—û–ª–¥–∞ —ë–∑–∏–Ω–≥.", reply_markup=kb_request_phone())
        return
    await state.update_data(phone=ph)
    await m.answer("üìç “ö–∞–µ—Ä–¥–∞–Ω –∂—û–Ω–∞–π—Å–∏–∑? –®–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
    await state.set_state(OrderForm.route_from)

@dp.message(OrderForm.phone)
async def phone_from_text(m: Message, state: FSMContext):
    ph = normalize_phone(m.text)
    if not is_valid_phone(ph):
        await m.answer("‚ùóÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ—Ç—û“ì—Ä–∏. +99890XXXXXXX –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ —ë–∑–∏–Ω–≥ —ë–∫–∏ —Ç—É–≥–º–∞–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.",
                       reply_markup=kb_request_phone())
        return
    await state.update_data(phone=ph)
    await m.answer("üìç “ö–∞–µ—Ä–¥–∞–Ω –∂—û–Ω–∞–π—Å–∏–∑? –®–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
    await state.set_state(OrderForm.route_from)

# ================== 2) “ö–∞–µ—Ä–¥–∞–Ω ==================
@dp.message(OrderForm.route_from)
async def select_from_city(m: Message, state: FSMContext):
    txt = (m.text or "").strip()
    if txt == BACK:
        await m.answer("üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.", reply_markup=kb_request_phone())
        await state.set_state(OrderForm.phone)
        return
    if txt not in CITIES:
        await m.answer("‚ùóÔ∏è –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
        return
    await state.update_data(route_from=txt)
    await m.answer("üìç “ö–∞–µ—Ä–≥–∞ –±–æ—Ä–∞—Å–∏–∑? –®–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
    await state.set_state(OrderForm.route_to)

# ================== 3) “ö–∞–µ—Ä–≥–∞ ==================
@dp.message(OrderForm.route_to)
async def select_to_city(m: Message, state: FSMContext):
    txt = (m.text or "").strip()
    if txt == BACK:
        await m.answer("üìç “ö–∞–µ—Ä–¥–∞–Ω –∂—û–Ω–∞–π—Å–∏–∑? –®–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
        await state.set_state(OrderForm.route_from)
        return
    if txt not in CITIES:
        await m.answer("‚ùóÔ∏è –ò–ª—Ç–∏–º–æ—Å, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
        return
    data = await state.get_data()
    from_city = data.get("route_from")
    if from_city == txt:
        await m.answer("‚ùóÔ∏è –ñ—û–Ω–∞—à –≤–∞ –±–æ—Ä–∏—à —à–∞“≥–∞—Ä–∏ –±–∏—Ä —Ö–∏–ª –±—û–ª–º–∞—Å–ª–∏–≥–∏ –∫–µ—Ä–∞–∫. –ë–æ—à“õ–∞ —à–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
        return
    normalized_route = f"{from_city} ‚Üí {txt}"
    await state.update_data(route=normalized_route)
    await m.answer("üë• “ö—É–π–∏–¥–∞ –æ–¥–∞–º —Å–æ–Ω–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ —ë–∫–∏ ¬´üì¶ –§–∞“õ–∞—Ç —é–∫¬ª –Ω–∏ –±–æ—Å–∏–Ω–≥:", reply_markup=kb_choice())
    await state.set_state(OrderForm.choice)

# ================== 4) –¢–∞–Ω–ª–æ–≤: –æ–¥–∞–º —ë–∫–∏ —Ñ–∞“õ–∞—Ç —é–∫ ==================
@dp.message(OrderForm.choice)
async def handle_choice(m: Message, state: FSMContext):
    txt = (m.text or "").strip()

    if txt == BACK:
        await m.answer("üìç “ö–∞–µ—Ä–≥–∞ –±–æ—Ä–∞—Å–∏–∑? –®–∞“≥–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.", reply_markup=kb_cities())
        await state.set_state(OrderForm.route_to)
        return

    if looks_like_cargo_only(txt):
        data = await state.get_data()
        await finalize(
            m, state,
            phone=data.get("phone"),
            route=data.get("route"),
            people=0,
            cargo="–ë–æ—Ä",
            note="-"
        )
        return

    p = people_to_int(txt)
    if p is None:
        await m.answer("‚ùóÔ∏è –§–∞“õ–∞—Ç —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥: 1, 2, 3, 4, 5+ —ë–∫–∏ üì¶ –§–∞“õ–∞—Ç —é–∫.", reply_markup=kb_choice())
        return

    await state.update_data(people=p, cargo="–ô—û“õ")
    await m.answer("üìù “ö—û—à–∏–º—á–∞ –∏–∑–æ“≥ (–≤–∞“õ—Ç, –º–∞–Ω–∑–∏–ª...). –ê–≥–∞—Ä –π—û“õ –±—û–ª—Å–∞, ¬´-¬ª –¥–µ–± —ë–∑–∏–Ω–≥.", reply_markup=kb_back_only())
    await state.set_state(OrderForm.note)

# ================== 5) –ò–∑–æ“≥ (—Ñ–∞“õ–∞—Ç –æ–¥–∞–º —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω–¥–∞) ==================
@dp.message(OrderForm.note)
async def step_note(m: Message, state: FSMContext):
    txt = (m.text or "").strip()

    if txt == BACK:
        await m.answer("üë• “ö—É–π–∏–¥–∞ –æ–¥–∞–º —Å–æ–Ω–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ —ë–∫–∏ ¬´üì¶ –§–∞“õ–∞—Ç —é–∫¬ª –Ω–∏ –±–æ—Å–∏–Ω–≥:", reply_markup=kb_choice())
        await state.set_state(OrderForm.choice)
        return

    if looks_like_cargo_only(txt):
        data = await state.get_data()
        await finalize(
            m, state,
            phone=data.get("phone"),
            route=data.get("route"),
            people=0,
            cargo="–ë–æ—Ä",
            note="-"
        )
        return

    note = "-" if txt == "-" else trim_note(txt)
    if note is None:
        await m.answer("‚ùóÔ∏è –ò–∑–æ“≥ –∂—É–¥–∞ “õ–∏—Å“õ–∞ —ë–∫–∏ –∂—É–¥–∞ —É–∑—É–Ω. ¬´-¬ª –¥–µ–± —ë–∑—Å–∞–Ω–≥–∏–∑ “≥–∞–º –±—û–ª–∞–¥–∏.", reply_markup=kb_back_only())
        return

    data = await state.get_data()
    await finalize(
        m, state,
        phone=data.get("phone"),
        route=data.get("route"),
        people=int(data.get("people", 1)),
        cargo=data.get("cargo", "–ô—û“õ"),
        note=note
    )

# ================== Run ==================
async def main():
    print("üöñ DAVON EXPRESS TAXI –±–æ—Ç–∏ –∏—à–≥–∞ —Ç—É—à–¥–∏‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
